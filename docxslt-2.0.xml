<doc>
<!--
<elem name="xsl element">
	<p>
		<e>xsl element</e>
		<a>xsl attribute</a>
		<t>xsl type</a>
		<l href="">link<l>
		<x>example</x>
		<xpath>xpath expression</xpath>
	</p>
</item>

litteral result element:
https://www.w3.org/TR/xslt20/#literal-result-element
-->

<elem name="template">
<p><e>template</e> defines the processing that can be be applied
to node that <a>match</a> a particular <t>pattern</t>. It contains a
sequence constructor for creating nodes and/or atomic values. If it has
a <a>match</a> attribute, it is invoked when an <e>apply-templates</e>
selects a node that match the pattern specified in the match attribute. If
it has a <a>name</a>attribute, it is invoked explicitely by name.</p>
<p>A <e>template</e> must have either a <a>match</a> attribute
or a <a>name</a> attribute. If it has no <a>match</a> attribute,
it must have no <a>mode</a> attribute and no <a>priority</a>
attribute. If present, the <a>as</a> attribute the result of the
sequence constructor is converted to the specified type (or raise a
<l href="https://www.w3.org/TR/xslt20/#dt-type-error">type error</l>
if it is not possible.</p>
</elem>

<elem name="apply-template">
<p><e>apply-template</e> takes as input a sequence of nodes, and
produces as output a sequence of items (often nodes added to a <l
href="https://www.w3.org/TR/xslt20/#dt-result-tree">result tree</l>).
Each node in the input sequence is processed by finding a template
rule whose pattern match that node. If there is more than one,
the <l href="https://www.w3.org/TR/xslt20/#conflict">best
among them is choosen</l>, if there is none, a <l
href="https://www.w3.org/TR/xslt20/#built-in-rule">built-in template
rule</l> is used. Each template rule evaluated produce a sequence
of item, and the resulting sequences are concatenated.</p> <p>The
default value of <a>match</a> is <xpath>child::node()</xpath>, and as
a result, <e>apply-templates</e> is commonly used to process nodes
descendant of the context node. But the <a>select</a> attribute
can select node by an expression, and so, <e>apply-templates</e>
can be used as a replacement of <e>if</e> or <e>choose</e>.</p>
<p>Furthermore, if the <a>mode</a> attribute is defined, only the
template rules that are applicable to the selected mode are considered.
<l href="https://www.w3.org/TR/xslt20/#modes">modes</l> allow a node
in the <l href="https://www.w3.org/TR/xslt20/#dt-source-tree">source
tree</l> to be processed multiple times, each time producing a different
result. They also allows different set of <e>template</e> rules to be
active when processing different trees.</p>
</elem>

<elem name="apply-imports">
<p>As well as <e>next-match</e>, <e>apply-imports</e> can be used to invoke an
overridden template rule. It only considers template rules in imported
stylesheet modules.</p>
</elem>

<elem name="next-match">
<p>As well as <e>apply-imports</e>, <e>next-match</e> can be used to invoke
an overridden template rule. It considers template rules of lower import
precedence or priority.</p>
<p>An <e>fallback</e> instruction appearing as a child of <e>next-match</e>
is ignored by an XSLT-2.0 processor, but can be used to define fallback
behavior when the stylesheet is processed by an XSLT-1.0 processor in
forwards-compatible mode.</p>
</elem>

<elem name="for-each">
<p><e>for-each</e> instruction processes each item in a sequence of item,
evaluating the sequence constructor for each item.</p>
<p>the <a>select</a> attribute is required, and the expression must evaluate
to a sequence. If there is an <e>sort</e> element present, the input sequence
is sorted.</p>
</elem>

<elem name="if">
<p>There are two instructions in XSLT that support conditional processing:
<e>if</e> and <e>choose</e>. <e>if</e> provides simple if-then conditionality.
It has a mandatory <a>test</a> attribute which specifies an expression.</p>
</elem>

<elem name="choose">
<p>There are two instructions in XSLT that support conditional processing:
<e>if</e> and <e>choose</e>. <e>choose</e> provides selection of one choice
when there are several possibilities. It consists of a sequence of one or
more <e>when</e> elements, followed by an optional <e>otherwise</e> element.
Each <e>when</e> element has a single attribute, <a>test</a> which specifies
an expression. When <e>choose</e> is processed, each of the <e>when</e> element
is tested in turn until one of them is satisfied. Only the content of the first
<e>when</e> that is satisfied is evaluated. If none is satisfied, the
<e>otherwise</e> is considered.</p>
</elem>

<elem name="when">
<p>Specifies, with the <a>test</a> attribute, an expression to be tested as part
of an <e>choose</e> instruction.</p>
</elem>

<elem name="otherwise">
<p>In a <e>choose</e> instruction, when none of the <e>when</e> element is satisfied,
the optional <e>otherwise</e> is considered, and processed.</p>
</elem>

<elem name="variable">
<p>The <e>variable</e> element declares a variable which may be global
or local.  It has a required <a>name</a> attribute which specifies the
name of the variable.  The value of the variable is defined either
by the expression of the <a>select</a> attribute or the sequence
constructor. If the <e>variable</e> has a <a>select</a> attribute, the
sequence constructor must be empty. The optional <a>as</a> attribute
defines the required type of variable. If specified, the value of the
variable is converted to the required type using the
<l href="https://www.w3.org/TR/xslt20/#dt-function-conversion-rules">function
conversion rules</l>.</p>
<p>The value of the variable named "name" can be accessed with the
"$name" expression.</p>
<p><e>variable</e> and <e>parameter</e> can be used to create <l
href="https://www.w3.org/TR/xslt20/#temporary-trees">temporary
trees</l> and two-phase transformations.</p>
</elem>

<elem name="param">
<p><e>param</e> declares a parameter which may be global or local. A parameter
is like a variable, with the additional property that it can be set by the caller.
As a child of <e>stylesheet</e> it defines a global
parameter which can be set by the XSLT processor. A
global parameter is visible everywhere, except where it is <l
href="https://www.w3.org/TR/xslt20/#dt-shadows">shadowed</l> by another
binding.
As a child of <e>template</e>, it defines a template parameter which
can be set when the template is called by <e>call-template</e>,
<e>apply-templates</e>, <e>apply-imports</e> or <e>next-match</e>.
As a child of <e>function</e>, it defines a function parameter, which
can be set when the function is called, using a function call in a an
XPath expression.
</p>
<p>The name of the parameter is defined by the <a>name</a>
attribute, and its default value is supplied by the caller. If
no value was supplied by the caller, then it is define by the
expression of the <a>select</a> attribute. The optional <a>as</a>
attribute defines the required type of variable. If specified, the
value of the variable is converted to the required type using the <l
href="https://www.w3.org/TR/xslt20/#dt-function-conversion-rules">function
conversion rules</l>. For <e>stylesheet</e> and <e>template</e>
parameters, the optional <a>required</a> attribute may be used to
indicate that the parameter is mandatory. It must not be specified for
<e>function</e> parameter which are alwasy mandatory.</p>
<p>The value of the parameter named "name" can be accessed with the "$name" expression.</p>
<p><e>variable</e> and <e>parameter</e> can be used to create <l
href="https://www.w3.org/TR/xslt20/#temporary-trees">temporary
trees</l> and two-phase transformations.</p>
</elem>

<elem name="call-template">
<p><e>call-template</e> invokes a template by name. Unlike the <e>apply-templates</e>,
it does not change the <l href="https://www.w3.org/TR/xslt20/#dt-focus">focus</l>.</p>
<p>The <a>match</a> and <a>priority</a> attributes of <e>template</e> have no effects
when the template is invoked by name.</p>
</elem>

<elem name="with-param">
<p>Parameters are passed to <e>template</e> using <e>with-param</e>. The
required <a>name</a> specifies the name of the <i ref="param">template
parameter</i>. <e>with-param</e> is allowed within <e>call-template</e>,
<e>apply-templates</e>, <e>apply-imports</e>, <e>next-match</e>.</p>
<p>A parameter passed to a template may be defined as a
<l href="https://www.w3.org/TR/xslt20/#dt-tunnel-parameter">tunnel parameter</l>.
Tunnel parameters are automatically passed on by the called template to any further
template that it calls, and so on recursively. Tunnel parameters thus allow values
to be set that are accessible during an entire phase of stylesheet processing,
without the need for each template that is used during that phase to be aware
of the parameter. A tunnel parameter is created by specifying <a>tunnel</a>="yes".</p>
<p>If supplied, the <a>as</a> of <e>with-param</e> is
evaluated before the one of <e>param</e>. Tunnel parameters are not passed in call
to <e>function</e>.</p>
</elem>

<elem name="attribute-set">
<p><e>attribute-set</e> defines a collection of attribute
definitions that can be used repeatedly on different
constructed elements.
Sets of attributes as defined by <e>attribute-set</e> are used by specifying a
<a>use-attribute-sets</a> on <e>element</e>, <e>copy</e> or a litteral result element.
The value of the <a>use-attribute-sets</a> is in each case a whitespace separated list
of names of attribute sets.</p>
<p>The required <a>name</a> specifies the name of the attribute set. The content
of the <e>attribute-set</e> specifies <e>attribute</e> instructions that are evaluated
to produce the attribute set. Specifying the  <a>use-attribute-sets</a> is broadly equivalent
to adding <e>attribute</e> for each of the attributes in each of the named sets.</p>
</elem>

<elem name="function">
<p><e>function</e> declares a stylesheet function that can be called
from an XPath expression within the stylesheet. It can only appear as
a top-level element in a stylesheet module. Its content consists of
zero or more <e>param</e> elements that specify the arguments of the
function, followed by a sequence constructor that defines the value to
be returned by the function. The <e>param</e> elements are interpreted
positionaly: the first argument of the function call is assigned to the
first <e>param</e> element. Because all arguments in a function call must
be specified, the <e>param</e> elements must not specify a default value:
they must be empty, and must not have a <a>select</a> attribute.</p>

<p><a>name</a> defines the name of the function, it must have a
prefixed name to remove any risk of clash with the default functions
(use <a>exclude-result-prefixes</a> on the <e>stylesheet</e> element to
prevent the namespace to appear on the result document). The optional
<a>override</a> defines what happens if this function have the same name
and number of arguments of another function: if its value is "yes"
it is used in preference. Specifying <a>override</a>="no" is usefull
when writing a fallback implementation of a function only available on
some processors. When <a>as</a> is specified, the result of the function is
converted to the required type.</p>

<!--
<xsl:function name="str:reverse" as="xs:string">
 <xsl:param name="sentence" as="xs:string"/>
  <xsl:sequence 
    select="if (contains($sentence, ' '))
    then concat(str:reverse(substring-after($sentence, ' ')),
      ' ',
      substring-before($sentence, ' '))
    else $sentence"/>
</xsl:function>

<xsl:template match="/">
  <output>
    <xsl:value-of select="str:reverse('DOG BITES MAN')"/>
  </output>
</xsl:template>
-->
</elem>

<elem name="attribute">
<p>There are three ways to define the attributes of a literal result
elements (in that order of precedence): <e>attribute</e>, literal
attribution, and <a>use-attribute-sets</a>.</p>
</elem>

<elem name="stylesheet">
	<p>An alias of <e>transform</e>.</p>
</elem>

<!-- todo: https://www.w3.org/TR/xslt20/#lre-namespaces -->
</doc>
